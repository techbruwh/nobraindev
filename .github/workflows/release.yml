name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            rust_target: x86_64-unknown-linux-gnu
          - os: macos-latest
            rust_target: x86_64-apple-darwin
          - os: macos-latest
            rust_target: aarch64-apple-darwin
          - os: windows-latest
            rust_target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.rust_target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: |
          cd ui
          npm install

      - name: Build frontend
        run: |
          cd ui
          npm run build

      # macOS Code Signing Setup
      - name: Import Apple Code Signing Certificate
        if: matrix.platform.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Import certificate from secrets
          echo -n "$APPLE_CERTIFICATE" | base64 --decode -o $CERTIFICATE_PATH

          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Allow codesign to access the keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

      - name: Build Tauri app (without automatic notarization)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'NoBrainDev ${{ github.ref_name }}'
          releaseBody: 'See the CHANGELOG.md for details.'
          releaseDraft: false
          prerelease: false
          args: --target ${{ matrix.platform.rust_target }}

      # Cleanup macOS keychain
      - name: Cleanup keychain
        if: always() && matrix.platform.os == 'macos-latest'
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true

  # Separate job for notarization
  notarize:
    needs: release
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/v')
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download DMGs from release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG=${{ github.ref_name }}
          
          mkdir -p dmgs
          cd dmgs
          
          # Download both DMGs from published release
          gh release download $RELEASE_TAG -p "*.dmg"
          
          echo "üì¶ Downloaded files:"
          ls -lh

      - name: Notarize DMGs
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          cd dmgs
          
          for dmg in *.dmg; do
            echo "üîç Notarizing $dmg..."
            
            # Submit without waiting first
            SUBMISSION_ID=$(xcrun notarytool submit "$dmg" \
              --apple-id "$APPLE_ID" \
              --password "$APPLE_PASSWORD" \
              --team-id "$APPLE_TEAM_ID" \
              --output-format json | jq -r '.id')
            
            echo "Submission ID: $SUBMISSION_ID"
            
            # Wait for up to 30 minutes with polling
            echo "Waiting for notarization (polling every 10 seconds, max 30 minutes)..."
            START_TIME=$(date +%s)
            MAX_WAIT=$((30 * 60))  # 30 minutes in seconds
            
            while true; do
              STATUS=$(xcrun notarytool info "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" \
                --output-format json | jq -r '.status')
              
              ELAPSED=$(($(date +%s) - START_TIME))
              echo "Status: $STATUS (Elapsed: ${ELAPSED}s)"
              
              if [ "$STATUS" = "Accepted" ]; then
                echo "‚úÖ Notarization accepted!"
                break
              elif [ "$STATUS" = "Rejected" ] || [ "$STATUS" = "Invalid" ]; then
                echo "‚ùå Notarization rejected!"
                exit 1
              elif [ "$ELAPSED" -gt "$MAX_WAIT" ]; then
                echo "‚è±Ô∏è  Timeout after 30 minutes. Check status manually at Apple Developer."
                echo "Submission ID: $SUBMISSION_ID"
                exit 1
              fi
              
              sleep 10
            done
            
            echo "üìé Stapling $dmg..."
            xcrun stapler staple "$dmg"
            
            echo "‚úÖ $dmg notarized and stapled!"
          done

      - name: Re-upload notarized DMGs to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_TAG=${{ github.ref_name }}
          cd dmgs
          
          echo "üì§ Re-uploading notarized DMGs..."
          
          # Remove old unsigned DMGs and upload notarized ones
          for dmg in *.dmg; do
            echo "Replacing $dmg with notarized version..."
            gh release delete-asset $RELEASE_TAG "$dmg" --yes || true
            sleep 1
            gh release upload $RELEASE_TAG "$dmg"
          done
          
          echo "‚úÖ All DMGs replaced with notarized versions!"